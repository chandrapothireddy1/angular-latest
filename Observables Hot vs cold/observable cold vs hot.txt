Observables cold vs Hot:
------------------------
https://medium.com/codingthesmartway-com-blog/getting-started-with-rxjs-part-3-hot-and-cold-observables-4713757c9a88


What’s The Difference BetWeen Cold And Hot Observables
In the last part of this series we’ve have been creating Observables in the following way:

var observable1 = Observable.create((observer:any) => {
    observer.next('Observable One is alive!');
    setInterval(() => {
        observer.next('Observable One');
    }, 5000);
});


We’ve used the Observable.create method to create a new Observable. We’ve also passed the producer function to the call of Observable.create. A producer function is the source of values for your observable. In our case we’re sending out events via observer.next in the producer function.

Creating an Observable in this way is what we call a “cold” Observable. An Observable is cold when the producer is created and activated during subscription. This means that the subscription to this Observable is receiving all values which are emitted. There are no values which have been emitted before or will be emitted afterwards.

In contrast, an Observable is regarded as “hot” when the producer is either created or activated outside of the subscription. As the producer is existing before the Observable and a corresponding Subscription is created values could have been emitted before the Subscription is in place.

Let’s quickly take a look at the definition from the RxJS project itself:

Cold observables start running upon subscription, i.e., the observable sequence only starts pushing values to the observers when Subscribe is called. (…) This is different from hot observables such as mouse move events or stock tickers which are already producing values even before a subscription is active.

Cold Observables: Producers created *inside*
Hot Observables: Producers created *outside*

https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339






